<pre class="brush:c">#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;unistd.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

#define PORTNUM 9000

int main(void) {
    char buf[256];
    struct sockaddr_in sin, cli;
    int sd, ns, clientlen = sizeof(cli);

    // socket 함수로 소켓을 생성한다.
    if((sd = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
        perror("socket");
        exit(1);
    }

    printf("** Create Socket\n");

    memset((char *)&sin, '\0', sizeof(sin));
    sin.sin_family = AF_INET;
    sin.sin_port = htons(PORTNUM);
    sin.sin_addr.s_addr = inet_addr("127.0.0.1");

    // 특정 IP 주소와 연결한다.
    if(bind(sd, (struct sockaddr *)&sin, sizeof(sin))) {
        perror("bind");
        exit(1);
    }
    printf("** Bind Socket\n");

    // listen 함수로 클라이언트의 접속을 5개까지 처리하도록 설정한다.
    if(listen(sd, 5)) {
        perror("listen");
        exit(1);
    }
    printf("** Listen Socket\n");

    // accept 함수를 사용해 클라이언트와 접속 요청을 받는다.
    while(1) {
       if((ns = accept(sd, (struct sockaddr *)&cli, &clientlen)) == -1) {
           perror("accept");
           exit(1);
       }
       printf("** Accept Client\n");

       // fork 함수로 자식 프로세스를 생성하고,
       // 해당 자식 프로세스가 클라이언트의 응답을 처리하게 한다.
       switch(fork()) {
           case 0:
               printf("** Fork Client\n");
               close(sd);
               // 클라이언트와 통신할 수 있는 소켓을 버퍼에 저장한다.
               sprintf(buf, "%d", ns);
               // execlp 함수를 사용해 bit 프로세스를 호출할 때
               // 위에서 저장한 소켓 정보를 인자로 함께 전송한다.
               // bit 프로세스가 클라이언트와 연결되어 서비스를 제공할 것이다.
               execlp("./bit", "bit", buf, (char *)0);
               close(ns);
       }
       close(ns);
    }

    return 0;
}
</pre>
